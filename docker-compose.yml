version: '3.8'

services:
  # Main application
  crypto-trading-bot:
    build: .
    container_name: crypto-trading-bot
    restart: unless-stopped
    env_file:
      - config/.env
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./src:/app/src:ro
    depends_on:
      - redis
    networks:
      - crypto-bot-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: crypto-trading-bot-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - crypto-bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis Commander (optional web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: crypto-trading-bot-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - crypto-bot-network
    profiles:
      - tools

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto-trading-bot-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - crypto-bot-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: crypto-trading-bot-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - crypto-bot-network
    profiles:
      - monitoring

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  crypto-bot-network:
    driver: bridge

# Profiles for different deployment scenarios
# Development: docker-compose up
# With tools: docker-compose --profile tools up
# With monitoring: docker-compose --profile monitoring up
# Full stack: docker-compose --profile tools --profile monitoring up
